/*

-----------------------------------------------------------------------------------------------------------------------------------
                                               Guidelines
-----------------------------------------------------------------------------------------------------------------------------------

The provided document is a guide for the project. Follow the instructions and take the necessary steps to finish
the project in the SQL file			

-----------------------------------------------------------------------------------------------------------------------------------

                                                         Queries
                                               
-----------------------------------------------------------------------------------------------------------------------------------*/
USE orders;
-- 1. WRITE A QUERY TO DISPLAY CUSTOMER FULL NAME WITH THEIR TITLE (MR/MS), BOTH FIRST NAME AND LAST NAME ARE IN UPPER CASE WITH 
-- CUSTOMER EMAIL ID, CUSTOMER CREATIONDATE AND DISPLAY CUSTOMERâ€™S CATEGORY AFTER APPLYING BELOW CATEGORIZATION RULES:
	-- i.IF CUSTOMER CREATION DATE YEAR <2005 THEN CATEGORY A
    -- ii.IF CUSTOMER CREATION DATE YEAR >=2005 AND <2011 THEN CATEGORY B
    -- iii.IF CUSTOMER CREATION DATE YEAR>= 2011 THEN CATEGORY C
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER TABLE]

SELECT CUSTOMER_ID, CUSTOMER_EMAIL 
 FROM online_customer; 
 SELECT * FROM online_customer; 
 SELECT
 CASE
 WHEN Customer_Gender = 'M' THEN Concat('Mr.',
 UPPER(customer_fname),'',UPPER(customer_lname))
 WHEN Customer_Gender = 'F' THEN Concat('Ms.', UPPER(customer_fname),'',UPPER(customer_lname))
 END Customer_Name, Customer_Email, Customer_Creation_Date,
 CASE
 WHEN YEAR(customer_creation_date) < 2005 THEN 'Category A'
 WHEN YEAR(customer_creation_date) BETWEEN 2005 AND 2011 THEN 'Category B' 
 WHEN YEAR(customer_creation_date) >=2011 THEN 'Category C' 
 END AS Category 
 FROM online_customer;  


-- 2. WRITE A QUERY TO DISPLAY THE FOLLOWING INFORMATION FOR THE PRODUCTS, WHICH HAVE NOT BEEN SOLD:  PRODUCT_ID, PRODUCT_DESC, 
-- PRODUCT_QUANTITY_AVAIL, PRODUCT_PRICE,INVENTORY VALUES(PRODUCT_QUANTITY_AVAIL*PRODUCT_PRICE), NEW_PRICE AFTER APPLYING DISCOUNT 
-- AS PER BELOW CRITERIA. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- i.IF PRODUCT PRICE > 20,000 THEN APPLY 20% DISCOUNT
    -- ii.IF PRODUCT PRICE > 10,000 THEN APPLY 15% DISCOUNT
    -- iii.IF PRODUCT PRICE =< 10,000 THEN APPLY 10% DISCOUNT
    
    -- HINT: USE CASE STATEMENT, NO PERMANENT CHANGE IN TABLE REQUIRED. [NOTE: TABLES TO BE USED -PRODUCT, ORDER_ITEMS TABLE] 
    
SELECT 
    PRODUCT_ID,
    PRODUCT_DESC,
    PRODUCT_QUANTITY_AVAIL,
    PRODUCT_PRICE,
    PRODUCT_QUANTITY_AVAIL * PRODUCT_PRICE AS INVENTORY_VALUE,
    CASE 
        WHEN PRODUCT_PRICE > 20000 THEN ROUND(PRODUCT_PRICE * 0.8, 2)
        WHEN PRODUCT_PRICE > 10000 THEN ROUND(PRODUCT_PRICE * 0.85, 2)
        ELSE ROUND(PRODUCT_PRICE * 0.9, 2)
    END AS NEW_PRICE
FROM 
    PRODUCT
WHERE 
    PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM ORDER_ITEMS)
ORDER BY 
    INVENTORY_VALUE DESC;


-- 3. WRITE A QUERY TO DISPLAY PRODUCT_CLASS_CODE, PRODUCT_CLASS_DESCRIPTION, COUNT OF PRODUCT TYPE IN EACH PRODUCT CLASS, 
-- INVENTORY VALUE (P.PRODUCT_QUANTITY_AVAIL*P.PRODUCT_PRICE). INFORMATION SHOULD BE DISPLAYED FOR ONLY THOSE PRODUCT_CLASS_CODE 
-- WHICH HAVE MORE THAN 1,00,000 INVENTORY VALUE. SORT THE OUTPUT WITH RESPECT TO DECREASING VALUE OF INVENTORY_VALUE.
	-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS]
    
SELECT 
    PRODUCT_CLASS.PRODUCT_CLASS_CODE,
    PRODUCT_CLASS.PRODUCT_CLASS_DESC,
    COUNT(PRODUCT.PRODUCT_ID) AS PRODUCT_TYPE_COUNT,
    SUM(PRODUCT.PRODUCT_QUANTITY_AVAIL * PRODUCT.PRODUCT_PRICE) AS INVENTORY_VALUE
FROM 
    PRODUCT
JOIN 
    PRODUCT_CLASS ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE
GROUP BY 
    PRODUCT_CLASS.PRODUCT_CLASS_CODE,
    PRODUCT_CLASS.PRODUCT_CLASS_DESC
HAVING 
    INVENTORY_VALUE > 100000
ORDER BY 
    INVENTORY_VALUE DESC;


-- 4. WRITE A QUERY TO DISPLAY CUSTOMER_ID, FULL NAME, CUSTOMER_EMAIL, CUSTOMER_PHONE AND COUNTRY OF CUSTOMERS WHO HAVE CANCELLED 
-- ALL THE ORDERS PLACED BY THEM(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
SELECT 
    online_customer.CUSTOMER_ID,
    CONCAT(online_customer.CUSTOMER_FNAME, ' ', online_customer.CUSTOMER_LNAME) AS FULL_NAME,
    online_customer.CUSTOMER_EMAIL,
    online_customer.CUSTOMER_PHONE,
    address.COUNTRY
FROM 
    online_customer
JOIN 
    address ON online_customer.ADDRESS_ID = address.ADDRESS_ID
WHERE 
    online_customer.CUSTOMER_ID NOT IN (
        SELECT 
            order_header.CUSTOMER_ID
        FROM 
            order_header
        WHERE 
            order_header.ORDER_STATUS != 'Cancelled'
        GROUP BY 
            order_header.CUSTOMER_ID
    );

        
-- 5. WRITE A QUERY TO DISPLAY SHIPPER NAME, CITY TO WHICH IT IS CATERING, NUMBER OF CUSTOMER CATERED BY THE SHIPPER IN THE CITY AND 
-- NUMBER OF CONSIGNMENTS DELIVERED TO THAT CITY FOR SHIPPER DHL(9 ROWS)
	-- [NOTE: TABLES TO BE USED -SHIPPER, ONLINE_CUSTOMER, ADDRESSS, ORDER_HEADER]
    
SELECT 
    shipper.SHIPPER_NAME,
    address.CITY AS CATERING_CITY,
    COUNT(DISTINCT online_customer.CUSTOMER_ID) AS CUSTOMERS_CATERED,
    COUNT(order_header.ORDER_ID) AS CONSIGNMENTS_DELIVERED
FROM 
    shipper
JOIN 
    order_header ON shipper.SHIPPER_ID = order_header.SHIPPER_ID
JOIN 
    online_customer ON order_header.CUSTOMER_ID = online_customer.CUSTOMER_ID
JOIN 
    address ON online_customer.ADDRESS_ID = address.ADDRESS_ID
WHERE 
    shipper.SHIPPER_NAME = 'dhl'
GROUP BY 
    shipper.SHIPPER_NAME,
    address.CITY;


-- 6. WRITE A QUERY TO DISPLAY CUSTOMER ID, CUSTOMER FULL NAME, TOTAL QUANTITY AND TOTAL VALUE (QUANTITY*PRICE) SHIPPED WHERE MODE 
-- OF PAYMENT IS CASH AND CUSTOMER LAST NAME STARTS WITH 'G'
	-- [NOTE: TABLES TO BE USED -ONLINE_CUSTOMER, ORDER_ITEMS, PRODUCT, ORDER_HEADER]

SELECT 
    ONLINE_CUSTOMER.CUSTOMER_ID,
    CONCAT(ONLINE_CUSTOMER.CUSTOMER_FNAME, ' ', ONLINE_CUSTOMER.CUSTOMER_LNAME) AS CUSTOMER_FULL_NAME,
    SUM(ORDER_ITEMS.PRODUCT_QUANTITY) AS TOTAL_QUANTITY,
    SUM(ORDER_ITEMS.PRODUCT_QUANTITY * PRODUCT.PRODUCT_PRICE) AS TOTAL_VALUE
FROM 
    ONLINE_CUSTOMER
JOIN 
    ORDER_HEADER ON ONLINE_CUSTOMER.CUSTOMER_ID = ORDER_HEADER.CUSTOMER_ID
JOIN 
    ORDER_ITEMS ON ORDER_HEADER.ORDER_ID = ORDER_ITEMS.ORDER_ID
JOIN 
    PRODUCT ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID
WHERE 
    ORDER_HEADER.PAYMENT_MODE = 'Cash'
    AND ONLINE_CUSTOMER.CUSTOMER_LNAME LIKE 'G%'
GROUP BY 
    ONLINE_CUSTOMER.CUSTOMER_ID,
    ONLINE_CUSTOMER.CUSTOMER_FNAME,
    ONLINE_CUSTOMER.CUSTOMER_LNAME;


    
-- 7. WRITE A QUERY TO DISPLAY ORDER_ID AND VOLUME OF BIGGEST ORDER (IN TERMS OF VOLUME) THAT CAN FIT IN CARTON ID 10  
	-- [NOTE: TABLES TO BE USED -CARTON, ORDER_ITEMS, PRODUCT]
    SELECT 
    ORDER_ITEMS.ORDER_ID,
    MAX(CASE WHEN ORDER_ITEMS.PRODUCT_QUANTITY * PRODUCT.LEN * PRODUCT.WIDTH * PRODUCT.HEIGHT <= CARTON.LEN * CARTON.WIDTH * CARTON.HEIGHT THEN ORDER_ITEMS.PRODUCT_QUANTITY * PRODUCT.LEN * PRODUCT.WIDTH * PRODUCT.HEIGHT ELSE 0 END) AS MAX_VOLUME
FROM 
    ORDER_ITEMS
JOIN 
    PRODUCT ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID
JOIN 
    CARTON ON CARTON.CARTON_ID = 10
GROUP BY 
    ORDER_ITEMS.ORDER_ID;



-- 8. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC, PRODUCT_QUANTITY_AVAIL, QUANTITY SOLD, AND SHOW INVENTORY STATUS OF 
-- PRODUCTS AS BELOW AS PER BELOW CONDITION:
	-- A.FOR ELECTRONICS AND COMPUTER CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY',
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 10% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY', 
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 50% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 50% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
SELECT 
    PRODUCT.PRODUCT_DESC, 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC,
    PRODUCT.PRODUCT_QUANTITY_AVAIL,
    COUNT(ORDER_ITEMS.PRODUCT_QUANTITY) AS SOLD_QUANTITY,
    (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 AS AvailableQty_Perc,
    CASE 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 < 10 THEN 'Low inventory, need to add inventory' 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 < 50 THEN 'Medium inventory, need to add some inventory' 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 >= 50 THEN 'Sufficient inventory' 
        ELSE 'No Sales in past, give discount to reduce inventory' 
    END AS INVENTORY_STATUS 
FROM 
    PRODUCT_CLASS 
INNER JOIN 
    PRODUCT ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE 
INNER JOIN 
    ORDER_ITEMS ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID 
INNER JOIN 
    ORDER_HEADER ON ORDER_HEADER.ORDER_ID = ORDER_ITEMS.ORDER_ID 
WHERE 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC IN ('Electronics', 'Computer') 
    AND ORDER_HEADER.ORDER_STATUS = 'Shipped' 
GROUP BY 
    PRODUCT.PRODUCT_DESC, 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC, 
    PRODUCT.PRODUCT_QUANTITY_AVAIL;
        
        
	-- B.FOR MOBILES AND WATCHES CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 20% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 60% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv.IF INVENTORY QUANTITY IS MORE OR EQUAL TO 60% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        SELECT 
    PRODUCT.PRODUCT_DESC, 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC,
    PRODUCT.PRODUCT_QUANTITY_AVAIL,
    COUNT(ORDER_ITEMS.PRODUCT_QUANTITY) AS SOLD_QUANTITY,
    (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 AS AvailableQty_Perc,
    CASE 
        WHEN COUNT(ORDER_ITEMS.PRODUCT_QUANTITY) = 0 THEN 'No sales in past, give discount to reduce inventory' 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 < 20 THEN 'Low inventory, need to add inventory' 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 < 60 THEN 'Medium inventory, need to add some inventory' 
        WHEN (PRODUCT.PRODUCT_QUANTITY_AVAIL / (PRODUCT.PRODUCT_QUANTITY_AVAIL + COUNT(ORDER_ITEMS.PRODUCT_QUANTITY))) * 100 >= 60 THEN 'Sufficient inventory' 
        ELSE 'Unknown' 
    END AS INVENTORY_STATUS 
FROM 
    PRODUCT_CLASS 
INNER JOIN 
    PRODUCT ON PRODUCT.PRODUCT_CLASS_CODE = PRODUCT_CLASS.PRODUCT_CLASS_CODE 
INNER JOIN 
    ORDER_ITEMS ON ORDER_ITEMS.PRODUCT_ID = PRODUCT.PRODUCT_ID 
INNER JOIN 
    ORDER_HEADER ON ORDER_HEADER.ORDER_ID = ORDER_ITEMS.ORDER_ID 
WHERE 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC IN ('Mobiles', 'Watches') 
    AND ORDER_HEADER.ORDER_STATUS = 'Shipped' 
GROUP BY 
    PRODUCT.PRODUCT_DESC, 
    PRODUCT_CLASS.PRODUCT_CLASS_DESC, 
    PRODUCT.PRODUCT_QUANTITY_AVAIL;
        
	-- C.REST OF THE CATEGORIES, 
		-- i.IF SALES TILL DATE IS ZERO THEN SHOW 'NO SALES IN PAST, GIVE DISCOUNT TO REDUCE INVENTORY', 
        -- ii.IF INVENTORY QUANTITY IS LESS THAN 30% OF QUANTITY SOLD, SHOW 'LOW INVENTORY, NEED TO ADD INVENTORY',  
        -- iii.IF INVENTORY QUANTITY IS LESS THAN 70% OF QUANTITY SOLD, SHOW 'MEDIUM INVENTORY, NEED TO ADD SOME INVENTORY', 
        -- iv. IF INVENTORY QUANTITY IS MORE OR EQUAL TO 70% OF QUANTITY SOLD, SHOW 'SUFFICIENT INVENTORY'
        
			-- [NOTE: TABLES TO BE USED -PRODUCT, PRODUCT_CLASS, ORDER_ITEMS] (USE SUB-QUERY)
SELECT 
    PRODUCT.PRODUCT_ID,
    PRODUCT.PRODUCT_DESC,
    PRODUCT.PRODUCT_QUANTITY_AVAIL,
    PRODUCT.PRODUCT_PRICE,
    PRODUCT.PRODUCT_QUANTITY_AVAIL * PRODUCT.PRODUCT_PRICE AS INVENTORY_VALUE,
    CASE 
        WHEN SOLD_ITEMS.PRODUCT_QUANTITY IS NULL THEN 'No sales in past, give discount to reduce inventory'
        WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL < 0.3 * SOLD_ITEMS.PRODUCT_QUANTITY THEN 'Low inventory, need to add inventory'
        WHEN PRODUCT.PRODUCT_QUANTITY_AVAIL < 0.7 * SOLD_ITEMS.PRODUCT_QUANTITY THEN 'Medium inventory, need to add some inventory'
        ELSE 'Sufficient inventory'
    END AS INVENTORY_STATUS
FROM 
    PRODUCT
LEFT JOIN 
    (SELECT 
         PRODUCT_ID, 
         SUM(PRODUCT_QUANTITY) AS PRODUCT_QUANTITY 
     FROM 
         ORDER_ITEMS 
     GROUP BY 
         PRODUCT_ID) AS SOLD_ITEMS ON PRODUCT.PRODUCT_ID = SOLD_ITEMS.PRODUCT_ID
WHERE 
    PRODUCT.PRODUCT_ID NOT IN (SELECT PRODUCT_ID FROM ORDER_ITEMS)
ORDER BY 
    INVENTORY_VALUE DESC;


    
-- 9. WRITE A QUERY TO DISPLAY PRODUCT_ID, PRODUCT_DESC AND TOTAL QUANTITY OF PRODUCTS WHICH ARE SOLD TOGETHER WITH PRODUCT ID 201 
-- AND ARE NOT SHIPPED TO CITY BANGALORE AND NEW DELHI. DISPLAY THE OUTPUT IN DESCENDING ORDER WITH RESPECT TO TOT_QTY.(USE SUB-QUERY)
	-- [NOTE: TABLES TO BE USED -ORDER_ITEMS,PRODUCT,ORDER_HEADER, ONLINE_CUSTOMER, ADDRESS]
    SELECT 
    product.PRODUCT_ID,
    product.PRODUCT_DESC,
    subquery.TOTAL_QUANTITY AS TOT_QTY
FROM 
    (
        SELECT 
            order_items.PRODUCT_ID,
            SUM(order_items.PRODUCT_QUANTITY) AS TOTAL_QUANTITY
        FROM 
            order_items
        JOIN 
            order_header ON order_items.ORDER_ID = order_header.ORDER_ID
        JOIN 
            online_customer ON order_header.CUSTOMER_ID = online_customer.CUSTOMER_ID
        JOIN 
            address ON online_customer.ADDRESS_ID = address.ADDRESS_ID
        WHERE 
            order_items.ORDER_ID IN (
                SELECT 
                    ORDER_ID
                FROM 
                    order_items
                WHERE 
                    PRODUCT_ID = 201
            )
            AND address.CITY NOT IN ('Bangalore', 'New Delhi')
        GROUP BY 
            order_items.PRODUCT_ID
    ) AS subquery
JOIN 
    product ON subquery.PRODUCT_ID = product.PRODUCT_ID
ORDER BY 
    subquery.TOTAL_QUANTITY DESC;


-- 10. WRITE A QUERY TO DISPLAY THE ORDER_ID,CUSTOMER_ID AND CUSTOMER FULLNAME AND TOTAL QUANTITY OF PRODUCTS SHIPPED FOR ORDER IDS 
-- WHICH ARE EVENAND SHIPPED TO ADDRESS WHERE PINCODE IS NOT STARTING WITH "5" 
	-- [NOTE: TABLES TO BE USED - ONLINE_CUSTOMER,ORDER_HEADER, ORDER_ITEMS, ADDRESS]
    SELECT 
    order_header.ORDER_ID,
    order_header.CUSTOMER_ID,
    CONCAT(online_customer.CUSTOMER_FNAME, ' ', online_customer.CUSTOMER_LNAME) AS CUSTOMER_FULLNAME,
    SUM(order_items.PRODUCT_QUANTITY) AS TOTAL_QUANTITY_SHIPPED
FROM 
    order_header
JOIN 
    online_customer ON order_header.CUSTOMER_ID = online_customer.CUSTOMER_ID
JOIN 
    order_items ON order_header.ORDER_ID = order_items.ORDER_ID
JOIN 
    address ON online_customer.ADDRESS_ID = address.ADDRESS_ID
WHERE 
    order_header.ORDER_ID % 2 = 0
    AND LEFT(CAST(address.PINCODE AS CHAR), 1) != '5'
GROUP BY 
    order_header.ORDER_ID,
    order_header.CUSTOMER_ID,
    online_customer.CUSTOMER_FNAME,
    online_customer.CUSTOMER_LNAME;
